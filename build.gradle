buildscript {
    ext {
        // 设置依赖版本
        lombok_version = "1.18.20"
        springboot_version = "2.7.11"
        log4j_version = "1.2.17"
        mysql_driver_version = "8.0.30"
        mybatis_plus_version = '3.5.3'
        fastjson_version = "1.2.75"
    }
}

plugins {
    id 'java'

}

group = 'org.example'
version = '1.0-SNAPSHOT'

// 避免编译乱码
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


// 编译跳过测试
gradle.taskGraph.whenReady {
    tasks.each { task ->
        if (task.name.contains("test")) {
            task.enabled = false
        }
    }
}


// 子项目统一管理
subprojects {
    // 基本J插件
    apply plugin: 'java'
    // maven 打包插件
    apply plugin: 'maven-publish'
    // 基本JDK配置
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    //指定编辑器
    apply plugin: 'idea'

    compileJava.options.encoding "UTF-8"
    compileTestJava.options.encoding "UTF-8"

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    group = 'org.gradle.base'
    version = '1.0-SNAPSHOT'

    // 设置 maven 仓库信息， 设置完之后，子工程的 build.gradle 文件就可以不用写了
    repositories {
        mavenLocal()
        maven { name "Alibaba"; url "https://maven.aliyun.com/repository/public" }
        maven { name "Bstek"; url "https://nexus.bsdn.org/content/groups/public/" }
        mavenCentral()
    }

    // 可以用来设置子工程的通用依赖
    dependencies {
        testImplementation platform('org.junit:junit-bom:5.9.1')
        testImplementation 'org.junit.jupiter:junit-jupiter'
        implementation "log4j:log4j:$log4j_version"
        // 双引号方式使用变量，在 ext 中声明或 def 关键字声明变量 lombok_version=具体版本
        implementation "org.projectlombok:lombok:$lombok_version"
        annotationProcessor "org.projectlombok:lombok:$lombok_version"
    }

    test {
        useJUnitPlatform()
    }

}


project('base-common') {
    dependencies {
        // 新的版本会覆盖
        implementation 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
    }
}

project('test-service1') {
    dependencies {
        // 导入本地项目依赖 方式一：使用 implementation 不会进行依赖传递
        implementation project(':base-common')
        // 导入本地项目依赖 方式二：依赖打包到本地镜像，然后进行导入
        // implementation("org.gradle.base:base-common:1.0-SNAPSHOT")

        // 倒入其他依赖
        implementation("org.springframework.boot:spring-boot-starter-web:$springboot_version") {
            // 进行依赖排除
            exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat')
        }
        //使用　undertow 代替 tomcat
        implementation "org.springframework.boot:spring-boot-starter-undertow:$springboot_version"
        // 全量写法
        implementation(group: 'mysql', name: 'mysql-connector-java', version: "$mysql_driver_version")
        implementation "com.baomidou:mybatis-plus-boot-starter:$mybatis_plus_version"
        implementation "com.alibaba:fastjson:$fastjson_version"
    }
}



